
{block content}
<h1 n:block="title">Welcome!</h1>

{if $user->isAllowed('project')}
	<h2>My projects</h2>

	<p><a n:href="Project:new" class="btn btn-primary">New project</a></p>

	<table class="table">
		<tbody>
			<tr n:foreach="$projects as $p">
				<td><a n:href="Element: projectId => $p->id">{$p->name}</a></td>
			</tr>
		</tbody>
	</table>
{/if}

{*
{block scripts}
{include #parent}
	<script src="{$basePath}/jsUML2/UDCore.js"></script>
	<script src="{$basePath}/jsUML2/UDModules.js"></script>
	<script>
	$(function(){
		var classDiagram = new UMLClassDiagram({ id: 'canvas', width: 500, height: 500 });
		var classes = {};
		{foreach $diagram['classes'] as $name => $class}
		classes[{$name}] = new UMLClass({ x: Math.floor(Math.random()*400), y: Math.floor(Math.random()*400) });
		classes[{$name}].setName({$name});
		classDiagram.addElement(classes[{$name}]);
		
		{var $attributes = isset($class['attributes']) ? $class['attributes'] : array()}
		{foreach $attributes as $aName => $attr}
		{if is_int($aName)}
		classes[{$name}].addAttribute({$attr});
		{else}
		classes[{$name}].addAttribute({$aName}+{$attr?': '.$attr:''});
		{/if}
		{/foreach}

		{var $operations = isset($class['operations']) ? $class['operations'] : array()}
		{foreach $operations as $oName => $op}
		{var params=>isset($op->attributes)?$op->attributes:array()}
		{foreach $params as $key => $value}{var params[$key]=>is_int($key) ? $value : "$key: $value"}{/foreach}
		{if is_int($oName)}
		classes[{$name}].addOperation({isset($op->value)?$op->value:$op}+"("+{$params|implode:', '}+")");
		{else}
		classes[{$name}].addOperation({$oName}+"("+{$params|implode:', '}+")"+{$op?': '.(isset($op->value)?$op->value:$op):''});
		{/if}
		{/foreach}

		{/foreach}

		{foreach $diagram['classes'] as $name => $class}
		{if !empty($class['parent'])}
		gen = new UMLGeneralization({ b:classes[{$class['parent']}], a:classes[{$name}] });
		classDiagram.addElement(gen);
		{/if}
		{/foreach}

		{foreach $diagram['associations'] as $assoc}
		{var ends => array_keys($assoc)}
		assoc = new UMLAssociation({ a:classes[{$ends[0]}], b:classes[{$ends[1]}] });
		assoc.setMultiplicityA({=(string) $assoc[$ends[0]]});
		assoc.setMultiplicityB({=(string) $assoc[$ends[1]]});
		classDiagram.addElement(assoc);
		{/foreach}

		classDiagram.draw();
		classDiagram.interaction(true);

		$('#canvas').on('dblclick', function(){
			var url = $('canvas').get(0).toDataURL( 'image/png' );
			window.open( url, '_blank' );
		});
	});
	</script>
{/block}

{block head}
{include #parent}
	<link rel="stylesheet" href="{$basePath}/jsUML2/css/UDStyle.css" media="screen">
{/block}

*}
